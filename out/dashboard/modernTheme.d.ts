export declare const modernThemeCSS = "\n    /* Enhanced Loading States */\n    .loading-skeleton {\n        background: linear-gradient(90deg, \n            var(--vscode-panel-background) 25%, \n            var(--vscode-sideBar-background) 50%, \n            var(--vscode-panel-background) 75%);\n        background-size: 200% 100%;\n        animation: shimmer 1.5s infinite;\n        border-radius: var(--border-radius);\n        height: 20px;\n        margin: 10px 0;\n    }\n\n    /* Interactive Progress Bars */\n    .progress-bar {\n        width: 100%;\n        height: 8px;\n        background: var(--vscode-panel-background);\n        border-radius: 4px;\n        overflow: hidden;\n        position: relative;\n        margin: 10px 0;\n    }\n\n    .progress-fill {\n        height: 100%;\n        background: linear-gradient(90deg, var(--success-color), var(--info-color));\n        border-radius: 4px;\n        transition: width 1s cubic-bezier(0.4, 0, 0.2, 1);\n        position: relative;\n        overflow: hidden;\n    }\n\n    .progress-fill::after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);\n        animation: progressShine 2s infinite;\n    }\n\n    @keyframes progressShine {\n        0% { transform: translateX(-100%); }\n        100% { transform: translateX(100%); }\n    }\n\n    /* Enhanced Cards with Glassmorphism */\n    .glass-card {\n        background: rgba(255, 255, 255, 0.05);\n        backdrop-filter: blur(10px);\n        border: 1px solid rgba(255, 255, 255, 0.1);\n        border-radius: 16px;\n        padding: 24px;\n        transition: all 0.3s ease;\n        position: relative;\n        overflow: hidden;\n    }\n\n    .glass-card::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);\n    }\n\n    .glass-card:hover {\n        transform: translateY(-4px);\n        background: rgba(255, 255, 255, 0.08);\n        box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n    }\n\n    /* Floating Action Buttons */\n    .fab {\n        position: fixed;\n        bottom: 30px;\n        right: 30px;\n        width: 60px;\n        height: 60px;\n        border-radius: 50%;\n        background: linear-gradient(135deg, var(--primary-color), var(--info-color));\n        color: white;\n        border: none;\n        cursor: pointer;\n        box-shadow: 0 8px 24px rgba(0,0,0,0.2);\n        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 24px;\n        z-index: 1000;\n    }\n\n    .fab:hover {\n        transform: scale(1.1);\n        box-shadow: 0 12px 32px rgba(0,0,0,0.3);\n    }\n\n    /* Enhanced Tooltips */\n    .tooltip {\n        position: relative;\n        display: inline-block;\n    }\n\n    .tooltip::after {\n        content: attr(data-tooltip);\n        position: absolute;\n        bottom: 125%;\n        left: 50%;\n        transform: translateX(-50%);\n        background: var(--vscode-editorHoverWidget-background);\n        color: var(--vscode-editorHoverWidget-foreground);\n        padding: 8px 12px;\n        border-radius: 6px;\n        font-size: 12px;\n        white-space: nowrap;\n        opacity: 0;\n        visibility: hidden;\n        transition: all 0.3s ease;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n        z-index: 1000;\n    }\n\n    .tooltip::before {\n        content: '';\n        position: absolute;\n        bottom: 115%;\n        left: 50%;\n        transform: translateX(-50%);\n        border: 5px solid transparent;\n        border-top-color: var(--vscode-editorHoverWidget-background);\n        opacity: 0;\n        visibility: hidden;\n        transition: all 0.3s ease;\n    }\n\n    .tooltip:hover::after,\n    .tooltip:hover::before {\n        opacity: 1;\n        visibility: visible;\n    }\n\n    /* Micro-interactions */\n    .bounce-in {\n        animation: bounceIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    }\n\n    @keyframes bounceIn {\n        0% { transform: scale(0.3); opacity: 0; }\n        50% { transform: scale(1.05); }\n        70% { transform: scale(0.9); }\n        100% { transform: scale(1); opacity: 1; }\n    }\n\n    .slide-up {\n        animation: slideUp 0.5s ease-out;\n    }\n\n    @keyframes slideUp {\n        from { transform: translateY(30px); opacity: 0; }\n        to { transform: translateY(0); opacity: 1; }\n    }\n\n    /* Enhanced Issue Items */\n    .issue-item-modern {\n        background: var(--vscode-panel-background);\n        border-radius: 12px;\n        padding: 20px;\n        margin: 12px 0;\n        border-left: 4px solid var(--error-color);\n        transition: all 0.3s ease;\n        position: relative;\n        overflow: hidden;\n        cursor: pointer;\n    }\n\n    .issue-item-modern::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background: linear-gradient(135deg, transparent, rgba(255,255,255,0.02));\n        opacity: 0;\n        transition: opacity 0.3s ease;\n    }\n\n    .issue-item-modern:hover {\n        transform: translateX(8px);\n        box-shadow: 0 8px 24px rgba(0,0,0,0.1);\n    }\n\n    .issue-item-modern:hover::before {\n        opacity: 1;\n    }\n\n    /* Status Indicators */\n    .status-indicator {\n        display: inline-flex;\n        align-items: center;\n        gap: 6px;\n        padding: 4px 12px;\n        border-radius: 20px;\n        font-size: 12px;\n        font-weight: 600;\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n    }\n\n    .status-critical {\n        background: rgba(244, 67, 54, 0.1);\n        color: var(--error-color);\n        border: 1px solid rgba(244, 67, 54, 0.3);\n    }\n\n    .status-warning {\n        background: rgba(255, 152, 0, 0.1);\n        color: var(--warning-color);\n        border: 1px solid rgba(255, 152, 0, 0.3);\n    }\n\n    .status-info {\n        background: rgba(33, 150, 243, 0.1);\n        color: var(--info-color);\n        border: 1px solid rgba(33, 150, 243, 0.3);\n    }\n\n    .status-success {\n        background: rgba(76, 175, 80, 0.1);\n        color: var(--success-color);\n        border: 1px solid rgba(76, 175, 80, 0.3);\n    }\n\n    /* Enhanced Tabs */\n    .tab-container {\n        border-bottom: 2px solid var(--vscode-panel-border);\n        margin-bottom: 30px;\n    }\n\n    .tab-nav {\n        display: flex;\n        gap: 0;\n        margin: 0;\n        padding: 0;\n        list-style: none;\n    }\n\n    .tab-button {\n        background: none;\n        border: none;\n        padding: 16px 24px;\n        cursor: pointer;\n        color: var(--vscode-descriptionForeground);\n        font-weight: 500;\n        transition: all 0.3s ease;\n        position: relative;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .tab-button.active {\n        color: var(--primary-color);\n        background: var(--vscode-panel-background);\n    }\n\n    .tab-button::after {\n        content: '';\n        position: absolute;\n        bottom: -2px;\n        left: 0;\n        right: 0;\n        height: 2px;\n        background: var(--primary-color);\n        transform: scaleX(0);\n        transition: transform 0.3s ease;\n    }\n\n    .tab-button.active::after {\n        transform: scaleX(1);\n    }\n\n    .tab-button:hover {\n        background: var(--vscode-list-hoverBackground);\n        color: var(--vscode-foreground);\n    }\n\n    /* Responsive Design */\n    @media (max-width: 768px) {\n        .container {\n            padding: 15px;\n        }\n        \n        .stats-grid {\n            grid-template-columns: 1fr;\n            gap: 15px;\n        }\n        \n        .header {\n            padding: 30px 20px;\n        }\n        \n        .fab {\n            bottom: 20px;\n            right: 20px;\n            width: 50px;\n            height: 50px;\n            font-size: 20px;\n        }\n    }\n";
export declare const modernJavaScript = "\n    // Enhanced interactions\n    function addModernInteractions() {\n        // Add ripple effect to buttons\n        document.querySelectorAll('.btn, .stat-card').forEach(element => {\n            element.addEventListener('click', function(e) {\n                const ripple = document.createElement('span');\n                const rect = this.getBoundingClientRect();\n                const size = Math.max(rect.width, rect.height);\n                const x = e.clientX - rect.left - size / 2;\n                const y = e.clientY - rect.top - size / 2;\n                \n                ripple.style.width = ripple.style.height = size + 'px';\n                ripple.style.left = x + 'px';\n                ripple.style.top = y + 'px';\n                ripple.classList.add('ripple');\n                \n                this.appendChild(ripple);\n                \n                setTimeout(() => {\n                    ripple.remove();\n                }, 600);\n            });\n        });\n\n        // Smooth scroll for navigation\n        document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n            anchor.addEventListener('click', function (e) {\n                e.preventDefault();\n                const target = document.querySelector(this.getAttribute('href'));\n                if (target) {\n                    target.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'start'\n                    });\n                }\n            });\n        });\n\n        // Intersection Observer for animations\n        const observerOptions = {\n            threshold: 0.1,\n            rootMargin: '0px 0px -50px 0px'\n        };\n\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    entry.target.classList.add('slide-up');\n                }\n            });\n        }, observerOptions);\n\n        document.querySelectorAll('.stat-card, .issue-item, .feature-card').forEach(el => {\n            observer.observe(el);\n        });\n    }\n\n    // Initialize modern interactions when DOM is ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', addModernInteractions);\n    } else {\n        addModernInteractions();\n    }\n";
//# sourceMappingURL=modernTheme.d.ts.map